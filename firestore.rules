rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isAdmin() {
      return isAuthenticated() && 
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    function isEmployee() {
      return isAuthenticated() && 
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'employee';
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isValidUserData() {
      return request.resource.data.keys().hasAll(['name', 'email', 'role']) &&
             request.resource.data.role in ['admin', 'employee'] &&
             request.resource.data.name is string &&
             request.resource.data.email is string &&
             request.resource.data.balance is number;
    }
    
    function isValidTransactionData() {
      return request.resource.data.keys().hasAll(['employeeId', 'type', 'amount']) &&
             request.resource.data.type in ['salary', 'withdrawal'] &&
             request.resource.data.amount is number &&
             request.resource.data.amount > 0;
    }
    
    function isValidWithdrawalData() {
      return request.resource.data.keys().hasAll(['employeeId', 'amount', 'reason', 'status']) &&
             request.resource.data.amount is number &&
             request.resource.data.amount > 0 &&
             request.resource.data.reason is string &&
             request.resource.data.status in ['pending', 'approved', 'rejected'];
    }
    
    // Users collection rules
    match /users/{userId} {
      // Allow read access to own profile or admin can read all
      allow read: if isOwner(userId) || isAdmin();
      
      // Only admin can create new users
      allow create: if isAdmin() && isValidUserData();
      
      // Users can update their own profile (limited fields), admin can update all
      allow update: if (isOwner(userId) && 
                       request.resource.data.diff(resource.data).affectedKeys().hasOnly(['name']) &&
                       request.resource.data.name is string) ||
                      (isAdmin() && isValidUserData());
      
      // Only admin can delete users
      allow delete: if isAdmin();
    }
    
    // Transactions collection rules
    match /transactions/{transactionId} {
      // Employees can read their own transactions, admin can read all
      allow read: if (isEmployee() && resource.data.employeeId == request.auth.uid) || 
                     isAdmin();
      
      // Only admin can create transactions
      allow create: if isAdmin() && isValidTransactionData();
      
      // No updates or deletes allowed for transactions (audit trail)
      allow update: if false;
      allow delete: if isAdmin();
    }
    
    // Withdrawals collection rules
    match /withdrawals/{withdrawalId} {
      // Employees can read their own withdrawals, admin can read all
      allow read: if (isEmployee() && resource.data.employeeId == request.auth.uid) || 
                     isAdmin();
      
      // Employees can create withdrawal requests for themselves
      allow create: if isEmployee() && 
                       isValidWithdrawalData() &&
                       request.resource.data.employeeId == request.auth.uid &&
                       request.resource.data.status == 'pending';
      
      // Only admin can update withdrawal status
      allow update: if isAdmin() && 
                       request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status', 'approvedAt', 'rejectedAt']) &&
                       request.resource.data.status in ['approved', 'rejected'];
      
      // Only admin can delete withdrawals
      allow delete: if isAdmin();
    }
    
    // Deny all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
}

